// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ONLINE
  OFFLINE
}

model Users {
  id                  String     @id
  name                String
  email               String
  emailVerified       Boolean
  image               String?
  createdAt           DateTime
  updatedAt           DateTime
  phoneNumber         String?
  phoneNumberVerified Boolean?
  role                String?
  banned              Boolean?
  banReason           String?
  banExpires          String?
  sessions            Session[]
  accounts            Account[]
  vehicles            Vehicle[]
  deliveries          Delivery[]
  Package             Package[]
  status              UserStatus @default(ONLINE) // New field

  @@unique([email])
  @@unique([phoneNumber])
  @@map("users")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  users          Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  users                 Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Vehicle {
  id               String     @id @default(uuid())
  deliveryPersonId String
  deliveryPerson   Users      @relation(fields: [deliveryPersonId], references: [id])
  type             String
  licensePlate     String
  maxWeight        Float
  currentLatitude  Float?
  currentLongitude Float?
  createdAt        DateTime   @default(now())
  deliveries       Delivery[]
}

model Location {
  id                String    @id @default(uuid())
  formattedAddress  String
  placeId           String    @unique
  latitude          Float
  longitude         Float
  addressComponents Json
  createdAt         DateTime  @default(now())
  packagesPickup    Package[] @relation("PickupLocation")
  packagesDelivery  Package[] @relation("DeliveryLocation")

  Delivery Delivery[]
}

model Package {
  id                 String         @id @default(uuid())
  customerId         String
  customer           Users          @relation(fields: [customerId], references: [id])
  description        String
  weight             Float
  pickupLocationId   String
  deliveryLocationId String
  pickupLocation     Location       @relation("PickupLocation", fields: [pickupLocationId], references: [id])
  deliveryLocation   Location       @relation("DeliveryLocation", fields: [deliveryLocationId], references: [id])
  createdAt          DateTime       @default(now())
  delivery           Delivery?
  labels             PackageLabel[]
}

// New model to handle package labels
model PackageLabel {
  id    String @id @default(uuid())
  value String
  label String

  packageId String
  package   Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
}

model Delivery {
  id                String         @id @default(uuid())
  packageId         String         @unique
  package           Package        @relation(fields: [packageId], references: [id])
  deliveryPersonId  String
  deliveryPerson    Users          @relation(fields: [deliveryPersonId], references: [id])
  vehicleId         String
  vehicle           Vehicle        @relation(fields: [vehicleId], references: [id])
  pickupTime        DateTime?
  deliveryTime      DateTime?
  currentLocationId String?
  currentLocation   Location?      @relation(fields: [currentLocationId], references: [id])
  status            DeliveryStatus
  createdAt         DateTime       @default(now())
}

enum DeliveryStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  FAILED
  DECLINED
}
